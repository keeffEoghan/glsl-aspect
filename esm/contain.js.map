{"mappings":"A,I,E,E,C,EEAA,EAAe,68BDER,IAAM,E,C,EAAO,I,E,U,C,E,O,C,EAEpB,IAAA,EAAe,S,K,I,C,K,O,C,oC","sources":["<anon>","src/contain.js","src/contain.glsl"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $b621c4414400569f$exports = {};\n$b621c4414400569f$exports = \"#define GLSLIFY 1\\n// Implementations for each dimension.\\n\\nfloat aspect(in float size, in float scale) {\\n    return scale/size;\\n}\\n\\nvec2 aspect(in vec2 size, in vec2 scale) {\\n    return scale/size;\\n}\\n\\nvec3 aspect(in vec3 size, in vec3 scale) {\\n    return scale/size;\\n}\\n\\nvec4 aspect(in vec4 size, in vec4 scale) {\\n    return scale/size;\\n}\\n\\n// These are for `scale` always `float`:\\n\\nvec2 aspect(in vec2 size, in float scale) {\\n    return aspect(size, vec2(scale));\\n}\\n\\nvec3 aspect(in vec3 size, in float scale) {\\n    return aspect(size, vec3(scale));\\n}\\n\\nvec4 aspect(in vec4 size, in float scale) {\\n    return aspect(size, vec4(scale));\\n}\\n\\nvec2 aspectContain(in vec2 size) {\\n    return aspect(size, max(size.x, size.y));\\n}\\n\\nvec3 aspectContain(in vec3 size) {\\n    return aspect(size, max(size.x, max(size.y, size.z)));\\n}\\n\\nvec4 aspectContain(in vec4 size) {\\n    return aspect(size, max(size.x, max(size.y, max(size.z, size.w))));\\n}\\n\\n\";\n\n\nconst $4d383c718df3e9a8$export$c1b1a45ed915aad9 = (0, (/*@__PURE__*/$parcel$interopDefault($b621c4414400569f$exports)));\nvar $4d383c718df3e9a8$export$2e2bcd8739ae039 = $4d383c718df3e9a8$export$c1b1a45ed915aad9;\n\n\nexport {$4d383c718df3e9a8$export$c1b1a45ed915aad9 as glsl, $4d383c718df3e9a8$export$2e2bcd8739ae039 as default};\n//# sourceMappingURL=contain.js.map\n","import g from './contain.glsl';\n\nexport const glsl = g;\n\nexport default glsl;\n","#pragma glslify: aspect = require('./index');\n\nvec2 aspectContain(in vec2 size) {\n    return aspect(size, max(size.x, size.y));\n}\n\nvec3 aspectContain(in vec3 size) {\n    return aspect(size, max(size.x, max(size.y, size.z)));\n}\n\nvec4 aspectContain(in vec4 size) {\n    return aspect(size, max(size.x, max(size.y, max(size.z, size.w))));\n}\n\n#pragma glslify: export(aspectContain);\n"],"names":["a","$b621c4414400569f$exports","$4d383c718df3e9a8$export$c1b1a45ed915aad9","__esModule","default","$4d383c718df3e9a8$export$2e2bcd8739ae039","glsl"],"version":3,"file":"contain.js.map"}